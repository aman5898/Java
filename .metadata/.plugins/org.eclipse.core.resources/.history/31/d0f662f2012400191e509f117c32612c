package linkedList;

import java.util.HashMap;
import java.util.Scanner;

public class Pep_JavaIP_9LinkedList_272MergeSort {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int a1 = sc.nextInt();
		insert(a1);

		for (int i = 1; i < n; i++) {
			int a = sc.nextInt();
			insert(a);
		}

		Node node = mergeSort(head);
		display(node);
	}

	private static class Node {
		int data;
		Node next;

		public Node(int data, Node next) {
			this.data = data;
			this.next = next;
		}

	}

	static Node head;
	static Node tail;
	static int size;

	public static void insert(int data) {

		Node nn = new Node(data, null);
		if (head == null) {
			head = nn;
			tail = nn;
		} else {
			tail.next = nn;
			tail = nn;
		}
		size++;
	}

	public static void display(Node n) {
		for (Node node = n; node != null; node = node.next) {
			System.out.print(node.data + " ");
		}
	}

	// -----------------------------------------------------
	// This is a functional problem. Only these functions have to be written.
	public static Node mergeLists(Node first, Node second) {
		Node nodeStart = null;
		Node nodeEnd = null;
		while (first != null || second != null) {
			if (first.data < second.data) {
				nodeEnd.next = first;
				nodeEnd = nodeEnd.next;
				first = first.next;
			} else {
				nodeEnd.next = second;
				nodeEnd = nodeEnd.next;
				second = second.next;
			}
		}

		while (second != null) {
			nodeEnd.next = second;
			nodeEnd = nodeEnd.next;
			second = second.next;
		}

		while (first != null) {
			nodeEnd.next = first;
			nodeEnd = nodeEnd.next;
			first = first.next;
		}

		return nodeStart;
	}

	public static Node mergeSort(Node node) {
		if (node == null || node.next == null) {
			return node;
		}

		// get the middle of the list
		Node middle = getMidNode(node);
		Node nextofmiddle = middle.next;

		// set the next of middle node to null
		middle.next = null;

		// Apply mergeSort on left list
		Node left = mergeSort(node);

		// Apply mergeSort on right list
		Node right = mergeSort(nextofmiddle);

		// Merge the left and right lists
		Node sortedlist = mergeLists(left, right);
		return sortedlist;
	}

	public static Node getMidNode(Node node) {
		if (node == null) 
            return node; 
        Node fastptr = node.next; 
        Node slowptr = node; 
          
        // Move fastptr by two and slow ptr by one 
        // Finally slowptr will point to middle node 
        while (fastptr != null) 
        { 
            fastptr = fastptr.next; 
            if(fastptr!=null) 
            { 
                slowptr = slowptr.next; 
                fastptr=fastptr.next; 
            } 
        } 
        return slowptr; 

	}

	// -----------------------------------------------------

}