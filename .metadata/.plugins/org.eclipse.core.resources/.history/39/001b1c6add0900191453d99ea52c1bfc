package bst;

public class BST {
	Node root;
	int size;

	private class Node {
		int data;
		Node left;
		Node right;
	}

	public BST(int[] sa) {
		root = construct(sa, 0, sa.length - 1);
	}

	private Node construct(int[] sa, int lo, int hi) {
		if (lo > hi) {
			return null;
		}
		Node node = new Node();
		int mid = (lo + hi) / 2;
		node.data = sa[mid];
		node.left = construct(sa, lo, mid - 1);
		node.right = construct(sa, mid + 1, hi);
		return node;
	}

	public void display() {

		display(root);

	}

	private void display(Node node) {
		if (node == null) {
			return;
		}

		String str = "";

		str += node.left != null ? node.left.data + "->" : ".->";

		str += node.right != null ? node.data + "<- " + node.right.data : node.data + "<- .";
		System.out.println(str);
		display(node.left);
		display(node.right);

	}
	
	public int max() {
		return max(root);
	}

	private int max(Node node) {
		if(node.right==null) {
			return node.data;
		}
		return max(node.right);
	}
	
	public int min() {
		return max(root);
	}

	private int min(Node node) {
		if(node.left==null) {
			return node.data;
		}
		return min(node.left);
	}
}
