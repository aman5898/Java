package arrays;

import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
//		Scanner scn = new Scanner(System.in);
//		int t = scn.nextInt();
//		while (t-- > 0) {
//			int n = scn.nextInt();
//			int k = scn.nextInt();
//			long[] arr = new long[n];
//			for (int i = 0; i < arr.length; i++) {
//				arr[i] = scn.nextInt();
//			}
//			System.out.println(kConcatenation(arr, k));
//		}
//		equilibriumIndex(new int[] { -7, 1, 5, 2, -4, 3, 0 });
//		subArraySum(new int[] { 1, 4, 0, 0, 3, 10, 5 }, 7);
//		chocolateDistribution(new int[] { 12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50 }, 7);
//		trappingRainWater(new int[] { 8, 8, 2, 4, 5, 5, 1 });
//		StockSell(new int[] { 23, 13, 25, 29, 33, 19, 34, 45, 65, 67 });
		kPairsmallestSum(new int[] { 1, 3, 11 }, new int[] { 2, 4, 8 }, 4);
	}

	private static class pair implements Comparable<pair> {
		int i;
		int j;
		int data;

		public pair(int i, int j, int data) {
			this.i = i;
			this.j = j;
			this.data = data;
		}

		@Override
		public int compareTo(pair o) {
			return this.data - o.data;
		}
	}

	public static void kPairsmallestSum(int[] arr1, int[] arr2,int k) {
		PriorityQueue<pair> pq = new PriorityQueue<>();
		pq.add(new pair(0, 0, arr1[0] + arr2[0]));
		while (k-->0) {
			pair rem = pq.remove();
			System.out.println("[" + rem.i + " " + rem.j + "]");
			if (rem.i < arr1.length - 1) {
				pq.add(new pair(rem.i + 1, rem.j, arr1[rem.i + 1] + arr2[rem.j]));
			}
			if (rem.j < arr2.length - 1) {
				pq.add(new pair(rem.i, rem.j + 1, arr1[rem.i] + arr2[rem.j + 1]));
			}
		}
	}

	public static void trappingRainWater(int[] arr) {
		int left = -1;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] != 0) {
				left = i;
				break;
			}
		}
		int cap = 0;
		for (int i = left + 1; i < arr.length; i++) {
			if (arr[i] != 0) {
				int count = i;
				int bw = 0;
				while (count < arr.length - 1) {
					count++;
					if (arr[count] != 0) {
						if (arr[count] > arr[i] && arr[count] > arr[left]) {
							bw += arr[i];
							i = count;
						} else if (arr[count] == arr[i]) {
							continue;
						} else {
							break;
						}
					}

				}
				int oldcap = cap;
				cap += (i - left - 1) * Math.min(arr[i], arr[left]);
				cap -= bw;
				if (cap != oldcap || i == left + 1) {
					left = i;
				}
			}
		}
		System.out.println(cap);
	}

	public static void chocolateDistribution(int[] arr, int m) {
		Arrays.sort(arr);
		int i = 0;
		int j = m - 1;
		int minDiff = Integer.MAX_VALUE;
		while (j < arr.length) {
			minDiff = Math.min(minDiff, arr[j] - arr[i]);

			i++;
			j++;
		}
		System.out.println(minDiff);
	}

	public static void zigzag(int[] arr) {
		boolean flag = false;
		for (int i = 0; i < arr.length - 1; i++) {
			if (flag == false) {
				if (arr[i] > arr[i + 1]) {
					swap(arr, i, i + 1);
				}
			} else {
				if (arr[i] < arr[i + 1]) {
					swap(arr, i, i + 1);
				}
			}
			flag = !flag;
		}
		for (int val : arr) {
			System.out.println(val);
		}
	}

	private static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	public static void subArraySum(int[] arr, int k) {
		int lIdx = 0;
		int lIdxSum = 0;
		int rIdxSum = 0;
		for (int i = 0; i < arr.length; i++) {
			rIdxSum += arr[i];
			if (rIdxSum - lIdxSum == k) {
				System.out.println(lIdx + "bazinga" + i);
			} else {
				while (lIdx < i && (rIdxSum - lIdxSum > k)) {

					lIdxSum += arr[lIdx];
					lIdx++;
					if (rIdxSum - lIdxSum == k) {
						System.out.println(lIdx + "bazinga" + i);
					}
				}

			}
		}

	}

	public static void equilibriumIndex(int[] arr) {
		int arrSum = 0;
		for (int val : arr) {
			arrSum += val;
		}

		int sum = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arrSum - sum - arr[i] == sum) {
				System.out.println(i);
			}
			sum += arr[i];
		}
	}

	public static long kConcatenation(long[] arr, int k) {
		if (k == 1) {
			return maxSub(arr);
		}
		long sum = 0;
		long[] arr2 = new long[2 * arr.length];
		for (int i = 0; i < arr2.length; i++) {
			arr2[i] = arr[i % arr.length];
			if (i < arr.length) {
				sum += arr[i];
			}
		}

		if (sum >= 0) {
			return (long) maxSub(arr2) + (k - 2) * sum;
		} else {
			return (long) maxSub(arr2);
		}
	}

	private static long maxSub(long[] arr) {
		long max = arr[0];
		for (int i = 1; i < arr.length; i++) {
			if (arr[i - 1] + arr[i] > arr[i]) {
				arr[i] += arr[i - 1];
			}
			max = Math.max(max, arr[i]);
		}
		return max;
	}

	private static void StockSell(int[] arr) {
		int left = 0;
		int right = 0;
		while (right < arr.length) {
			if (right != arr.length - 1 && arr[right] < arr[right + 1]) {
				right++;
			} else {
				if (right != left) {
					System.out.print("(" + left + " " + right + ") ");
				}
				left = right + 1;
				right = right + 1;
			}
		}
	}

	private static void kPairSmallest(int[] arr1, int[] arr2, int k) {
		int i = 0;
		int j = 0;
		while (k-- > 0) {
			System.out.println("(" + arr1[i] + " " + arr2[j] + ")");
			if (i + 1 == arr1.length || j + 1 == arr2.length) {
				break;
			}
			if (arr1[i + 1] + arr2[j] < arr1[i] + arr2[j + 1]) {
				i = i + 1;
			} else if (arr1[i + 1] + arr2[j] == arr1[i] + arr2[j + 1]) {
				System.out.println("(" + arr1[i] + " " + arr2[j + 1] + ")");
				i += 1;
				k--;
			} else {
				j = j + 1;
			}
		}
	}

}
