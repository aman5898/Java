package arrays;

import java.util.*;
import java.lang.*;
import java.io.*;

class largestNumberArray {
	public static void main(String[] args) {
//		Scanner scn = new Scanner(System.in);
//		int t = scn.nextInt();
//		while (t-- > 0) {
//			int k = scn.nextInt();
//			int n = scn.nextInt();
//			int[] arr = new int[n];
//			for (int i = 0; i < arr.length; i++) {
//				arr[i] = scn.nextInt();
//			}
//			kthLargest(arr, k);
//			System.out.println();
//		}
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while (t-- > 0) {
			int n = sc.nextInt();
			long[] dp = new long[n + 1];

			for (int i = 0; i <= n; ++i) {
				if (i <= 2) {
					dp[i] = i;
				} else {
					dp[i] = (dp[i - 1] % 1000000007 + ((i - 1) * dp[i - 2]) % 1000000007) % 1000000007;
				}
			}
			System.out.println(dp[n]);
		}
		sc.close();
	}

	public static void kthLargest(int[] arr, int k) {
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		for (int i = 0; i < arr.length; i++) {
			if (pq.size() < k) {
				pq.add(arr[i]);
				if (pq.size() == k) {
					System.out.println(pq.peek());
				} else {
					System.out.println("-1");
				}
			} else {
				if (arr[i] > pq.peek()) {
					pq.remove();
					pq.add(arr[i]);
				}
				System.out.println(pq.peek());
			}
		}
	}

	public static void largestNumber(int[] arr) {
		for (int i = 0; i < arr.length - 1; i++) {
			for (int j = 0; j < arr.length - i - 1; j++) {
				if (isHp(arr[j], arr[j + 1]) == false) {
					swap(arr, i, j);
				}
			}
		}
	}

	public static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	public static boolean isHp(int a, int b) {
		String x = a + "" + b;
		String y = b + "" + a;
		// if(a==3&&b==30){
		// System.out.println(Integer.parseInt(x)+" "+Integer.parseInt(y));
		// }

		return Integer.parseInt(x) < Integer.parseInt(y);
	}
}