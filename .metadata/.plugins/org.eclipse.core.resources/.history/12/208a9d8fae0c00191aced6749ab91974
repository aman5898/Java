package hashmap;

import java.util.Collections;
import java.util.PriorityQueue;

public class PQClient {

	public static void main(String[] args) {
		int[] arr = { 4, 5, 6, 7, 8, 9, 1, 2, 3 };
		printKlargestBetter(arr, 3);
	}

	// space on time (n+k)logn
	public static void printKlargest(int[] arr, int k) {
		PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
		for (int val : arr) {
			pq.add(val);
		}

		for (int i = 0; i < k; i++) {
			System.out.println(pq.remove());
		}
	}
	
	// space ok time nlogk
	public static void printKlargestBetter(int[] arr, int k) {
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		for(int i=0;i<k;i++) {
			pq.add(arr[i]);
		}
		for(int i=k;i<arr.length;i++) {
			int x=pq.peek();
			if(arr[i]>x) {
				pq.remove();
				pq.add(arr[i]);
			}
		}
		System.out.println(pq);
	}

}
